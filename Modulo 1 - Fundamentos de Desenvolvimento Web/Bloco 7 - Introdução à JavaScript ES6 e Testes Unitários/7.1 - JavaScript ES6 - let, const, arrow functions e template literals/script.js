/* Parte I */

/* 1- Fa√ßa as modifica√ß√µes necess√°rias na fun√ß√£o para que o seu comportamento respeite o escopo no qual cada vari√°vel foi declarada.
. Modifique a estrutura da fun√ß√£o para que ela seja uma arrow function .
. Modifique as concatena√ß√µes para template literals .
 */

const testingScope = (escopo) => {

  if (escopo === true) {
    let ifScope = 'N√£o devo ser utilizada fora do meu escopo (if)';
    ifScope = ifScope + ' √≥timo, fui utilizada no escopo !';
    console.log(ifScope);
  } else {
    let elseScope = 'N√£o devo ser utilizada fora meu escopo (else)';
    console.log(elseScope);
  }

}
testingScope(true); 

/* 2- Copie o c√≥digo abaixo e fa√ßa uma fun√ß√£o que retorne o array oddsAndEvens em ordem crescente.
. Utilize template literals para que a chamada console.log(<seu c√≥digo>oddsAndEvens<seu c√≥digo>); retorne "Os n√∫meros 2,3,4,7,10,13 se encontram ordenados de forma crescente!".
. B√¥nus (opcional): tente fazer o mesmo exerc√≠cio utilizando o m√©todo array.sort() . Spoiler: √â poss√≠vel realizar uma fun√ß√£o que ordene qualquer array de n√∫meros.
 */

let oddsAndEvens = [13, 3, 4, 10, 7, 2]; 

let compareFunction = (a,b) => a-b; 

// Seu c√≥digo aqui.
let crescente = oddsAndEvens.sort(compareFunction) 


console.log(`Os n√∫meros ${crescente} se encontram ordenados de forma crescente!`); // ser√° necess√°rio alterar essa linha üòâ */


/* Parte II  */

/* Crie uma fun√ß√£o que receba um n√∫mero e retorne seu fatorial.
. Na matem√°tica, o fatorial de um n√∫mero n√£o negativo N , com a nota√ß√£o N! , √© o produto de todos os inteiros menores ou iguais a N . Exemplo: 4! = 4 * 3 * 2 * 1 = 24.
. B√¥nus (opcional): tente fazer o mesmo exerc√≠cio de forma recursiva . Spoiler: √â poss√≠vel resolver com uma linha usando ternary operator . */

let resultado = 1;

 const fatorial = (n) => {
  
  if(n > 1){
    resultado = resultado*n;
    n = n - 1;
    fatorial(n);
    
}
  return resultado;
} 
const a = fatorial(6);
console.log(a);


let fatorialNumber = 1;
const fatorial2 = (n) => {
  
  n > 1 ? (fatorialNumber = fatorialNumber * n , n = n-1, fatorial2(n)) : true;
  
  return fatorialNumber; 
}
const c = fatorial2(6);
console.log(c);
